use crate::ast::{Command, Redirection, Argument, SimpleCommand, Script};

grammar;

Pipe<T>: Vec<T> = {
    <mut v:(<T> PIPE)*> <e:T> => match e {
        None=> v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

Semicolon<T>: Vec<T> = {
    <mut v:(<T> SEMICOLON)*> <e: T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
}

pub Commands: Script = {
    Semicolon<Command> => Script(<>.into_iter().map(|c| *c).collect())
};

Command: Box<Command> = {
    #[precedence(level = "1")] #[assoc(side="left")]
    <l:Command> PIPE <r:Command> => Box::new(Command::Pipe(l, r)),

    #[precedence(level = "0")]
    SimpleCommand,
};

SimpleCommand: Box<Command> = {
    Word ArgList Redirection* => Box::new(Command::Simple(SimpleCommand::new(<>))),
};

ArgList: Vec<Argument> = {
    Arg*
};

Arg: Argument = {
    Word => Argument::Literal(<>),
    Variable => Argument::Variable(<>),
};

Redirection: Redirection = {
    "<" <Arg> => Redirection::Input(<>),
    ">" <Arg> => Redirection::Output(<>),
    ">>" <Arg> => Redirection::Append(<>),
};

Word: String = {
    r#"[^\s\";|><]+"# => String::from(<>),
    <s:QuotedString> => String::from(&s[1..s.len()-1])
};

QuotedString: String = {
    r#""[^"]*""# => String::from(<>),
};

Variable: String = {
    "$" <Word> => <>,
};

PIPE: () = { "|" }
SEMICOLON: () = { ";" }

